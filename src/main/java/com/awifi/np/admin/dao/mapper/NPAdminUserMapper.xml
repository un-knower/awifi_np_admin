<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.awifi.np.admin.dao.NPAdminUserMapper">
  <resultMap id="BaseResultMap" type="com.awifi.np.admin.entity.NPAdminUser">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="login_account" jdbcType="VARCHAR" property="loginAccount" />
    <result column="login_pwd" jdbcType="VARCHAR" property="loginPwd" />
    <result column="create_date" jdbcType="TIMESTAMP" property="createDate" />
    <result column="last_login_date" jdbcType="TIMESTAMP" property="lastLoginDate" />
    <result column="error_count" jdbcType="INTEGER" property="errorCount" />
    <result column="state" jdbcType="INTEGER" property="state" />
    <result column="role_id" jdbcType="INTEGER" property="roleId" />
    <result column="phone" jdbcType="VARCHAR" property="phone" />
    <result column="remark" jdbcType="VARCHAR" property="remark" />
    <association property="role" column="role_id"                       
            select="com.awifi.np.admin.dao.NPAdminRoleMapper.selectByPrimaryKey" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, login_account, login_pwd, create_date, last_login_date, error_count, state, role_id, 
    phone, remark
  </sql>
  <select id="selectByExample" parameterType="com.awifi.np.admin.entity.NPAdminUserCriteria" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from np_admin_user
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from np_admin_user
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from np_admin_user
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.awifi.np.admin.entity.NPAdminUserCriteria">
    delete from np_admin_user
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.awifi.np.admin.entity.NPAdminUser">
    insert into np_admin_user (id, login_account, login_pwd, 
      create_date, last_login_date, error_count, 
      state, role_id, phone, 
      remark)
    values (#{id,jdbcType=INTEGER}, #{loginAccount,jdbcType=VARCHAR}, #{loginPwd,jdbcType=VARCHAR}, 
      #{createDate,jdbcType=TIMESTAMP}, #{lastLoginDate,jdbcType=TIMESTAMP}, #{errorCount,jdbcType=INTEGER}, 
      #{state,jdbcType=INTEGER}, #{roleId,jdbcType=INTEGER}, #{phone,jdbcType=VARCHAR}, 
      #{remark,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.awifi.np.admin.entity.NPAdminUser">
    insert into np_admin_user
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="loginAccount != null">
        login_account,
      </if>
      <if test="loginPwd != null">
        login_pwd,
      </if>
      <if test="createDate != null">
        create_date,
      </if>
      <if test="lastLoginDate != null">
        last_login_date,
      </if>
      <if test="errorCount != null">
        error_count,
      </if>
      <if test="state != null">
        state,
      </if>
      <if test="roleId != null">
        role_id,
      </if>
      <if test="phone != null">
        phone,
      </if>
      <if test="remark != null">
        remark,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="loginAccount != null">
        #{loginAccount,jdbcType=VARCHAR},
      </if>
      <if test="loginPwd != null">
        #{loginPwd,jdbcType=VARCHAR},
      </if>
      <if test="createDate != null">
        #{createDate,jdbcType=TIMESTAMP},
      </if>
      <if test="lastLoginDate != null">
        #{lastLoginDate,jdbcType=TIMESTAMP},
      </if>
      <if test="errorCount != null">
        #{errorCount,jdbcType=INTEGER},
      </if>
      <if test="state != null">
        #{state,jdbcType=INTEGER},
      </if>
      <if test="roleId != null">
        #{roleId,jdbcType=INTEGER},
      </if>
      <if test="phone != null">
        #{phone,jdbcType=VARCHAR},
      </if>
      <if test="remark != null">
        #{remark,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.awifi.np.admin.entity.NPAdminUserCriteria" resultType="java.lang.Long">
    select count(*) from np_admin_user
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update np_admin_user
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.loginAccount != null">
        login_account = #{record.loginAccount,jdbcType=VARCHAR},
      </if>
      <if test="record.loginPwd != null">
        login_pwd = #{record.loginPwd,jdbcType=VARCHAR},
      </if>
      <if test="record.createDate != null">
        create_date = #{record.createDate,jdbcType=TIMESTAMP},
      </if>
      <if test="record.lastLoginDate != null">
        last_login_date = #{record.lastLoginDate,jdbcType=TIMESTAMP},
      </if>
      <if test="record.errorCount != null">
        error_count = #{record.errorCount,jdbcType=INTEGER},
      </if>
      <if test="record.state != null">
        state = #{record.state,jdbcType=INTEGER},
      </if>
      <if test="record.roleId != null">
        role_id = #{record.roleId,jdbcType=INTEGER},
      </if>
      <if test="record.phone != null">
        phone = #{record.phone,jdbcType=VARCHAR},
      </if>
      <if test="record.remark != null">
        remark = #{record.remark,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update np_admin_user
    set id = #{record.id,jdbcType=INTEGER},
      login_account = #{record.loginAccount,jdbcType=VARCHAR},
      login_pwd = #{record.loginPwd,jdbcType=VARCHAR},
      create_date = #{record.createDate,jdbcType=TIMESTAMP},
      last_login_date = #{record.lastLoginDate,jdbcType=TIMESTAMP},
      error_count = #{record.errorCount,jdbcType=INTEGER},
      state = #{record.state,jdbcType=INTEGER},
      role_id = #{record.roleId,jdbcType=INTEGER},
      phone = #{record.phone,jdbcType=VARCHAR},
      remark = #{record.remark,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.awifi.np.admin.entity.NPAdminUser">
    update np_admin_user
    <set>
      <if test="loginAccount != null">
        login_account = #{loginAccount,jdbcType=VARCHAR},
      </if>
      <if test="loginPwd != null">
        login_pwd = #{loginPwd,jdbcType=VARCHAR},
      </if>
      <if test="createDate != null">
        create_date = #{createDate,jdbcType=TIMESTAMP},
      </if>
      <if test="lastLoginDate != null">
        last_login_date = #{lastLoginDate,jdbcType=TIMESTAMP},
      </if>
      <if test="errorCount != null">
        error_count = #{errorCount,jdbcType=INTEGER},
      </if>
      <if test="state != null">
        state = #{state,jdbcType=INTEGER},
      </if>
      <if test="roleId != null">
        role_id = #{roleId,jdbcType=INTEGER},
      </if>
      <if test="phone != null">
        phone = #{phone,jdbcType=VARCHAR},
      </if>
      <if test="remark != null">
        remark = #{remark,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.awifi.np.admin.entity.NPAdminUser">
    update np_admin_user
    set login_account = #{loginAccount,jdbcType=VARCHAR},
      login_pwd = #{loginPwd,jdbcType=VARCHAR},
      create_date = #{createDate,jdbcType=TIMESTAMP},
      last_login_date = #{lastLoginDate,jdbcType=TIMESTAMP},
      error_count = #{errorCount,jdbcType=INTEGER},
      state = #{state,jdbcType=INTEGER},
      role_id = #{roleId,jdbcType=INTEGER},
      phone = #{phone,jdbcType=VARCHAR},
      remark = #{remark,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <select id="listPageUsers" parameterType="com.awifi.np.admin.entity.NPPage" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from np_admin_user
    where 1=1
    <if test="params.keyword != null and params.keyword1 != null">
        AND (login_account LIKE #{params.keyword} OR role_id in (#{params.keyword1}))
    </if>
    <if test="params.keyword != null and params.keyword1 == null">
      AND (login_account LIKE #{params.keyword})
    </if>
    <if test="params.keyword == null and params.keyword1 != null">
      AND (role_id in (#{params.keyword1}))
    </if>
    order by create_date desc
  </select>
  <delete id="deleteByIds">
    delete from np_admin_user
    where id in
    <foreach collection="array" item="id" open="(" close=")" separator=",">
      #{id}
    </foreach>
  </delete>
  <!--  <update id="updateRoleToNull" parameterType="com.awifi.np.admin.entity.NPAdminUser">
    update np_admin_user
    set role_id = #{roleId,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update> -->
</mapper>